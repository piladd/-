// src/utils/crypto.ts

import { useAuthStore } from '@/store/auth'
import type { MessageDto } from '@/types/Message'
import { uploadPublicKey, getPublicKey } from '@/services/chat.service'

/** –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Base64 (URL-safe ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π) */
function normalizeBase64(b64: string): string {
  let s = b64.replace(/-/g, '+').replace(/_/g, '/')
  while (s.length % 4 !== 0) s += '='
  return s
}

/** Base64 ‚Üí ArrayBuffer */
export function base64ToBuffer(base64: string): ArrayBuffer {
  const normalized = normalizeBase64(base64)
  const bin = atob(normalized)
  const bytes = new Uint8Array(bin.length)
  for (let i = 0; i < bin.length; i++) bytes[i] = bin.charCodeAt(i)
  return bytes.buffer
}

/** ArrayBuffer/TypedArray ‚Üí Base64 */
export function bufferToBase64(input: ArrayBuffer | ArrayBufferView): string {
  const bytes = input instanceof ArrayBuffer
      ? new Uint8Array(input)
      : new Uint8Array(input.buffer, input.byteOffset, input.byteLength)
  let bin = ''
  for (let i = 0; i < bytes.byteLength; i++) {
    bin += String.fromCharCode(bytes[i])
  }
  return btoa(bin)
}

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã RSA-OAEP (2048 –±–∏—Ç, SHA-256) */
export async function generateKeyPair(): Promise<CryptoKeyPair> {
  return crypto.subtle.generateKey(
      { name: 'RSA-OAEP', modulusLength: 2048, publicExponent: new Uint8Array([1, 0, 1]), hash: 'SHA-256' },
      true,
      ['encrypt', 'decrypt']
  )
}

/** –≠–∫—Å–ø–æ—Ä—Ç RSA-–ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ SPKI‚ÜíBase64 */
export async function exportRsaPublicKey(key: CryptoKey): Promise<string> {
  const spki = await crypto.subtle.exportKey('spki', key)
  return bufferToBase64(spki)
}

/** –ò–º–ø–æ—Ä—Ç RSA-–ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ SPKI(Base64) */
export async function importRsaPublicKey(keyBase64: string): Promise<CryptoKey> {
  const buff = base64ToBuffer(keyBase64)
  return crypto.subtle.importKey(
      'spki', buff,
      { name: 'RSA-OAEP', hash: 'SHA-256' },
      true,
      ['encrypt']
  )
}

/** –≠–∫—Å–ø–æ—Ä—Ç RSA-–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ PKCS#8‚ÜíBase64 */
export async function exportRsaPrivateKey(key: CryptoKey): Promise<string> {
  const pkcs8 = await crypto.subtle.exportKey('pkcs8', key)
  return bufferToBase64(pkcs8)
}

/** –í –ø–∞–º—è—Ç–∏ –∏ –≤ Pinia-—Å—Ç–æ—Ä–µ */
let _privateKeyInstance: CryptoKey | null = null

/** –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ localStorage (PKCS#8 Base64) */
export async function storePrivateKey(key: CryptoKey): Promise<void> {
  const b64 = await exportRsaPrivateKey(key)
  localStorage.setItem('privateKeyBase64', b64)
  _privateKeyInstance = key
  const auth = useAuthStore()
  auth.privateKey = key
}

/** –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ localStorage */
export async function loadPrivateKey(): Promise<CryptoKey> {
  if (_privateKeyInstance) {
    return _privateKeyInstance
  }

  const b64 = localStorage.getItem('privateKeyBase64')
  if (!b64) {
    throw new Error('–ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')
  }

  const buffer = base64ToBuffer(b64)
  const key = await crypto.subtle.importKey(
      'pkcs8', buffer,
      { name: 'RSA-OAEP', hash: 'SHA-256' },
      true,
      ['decrypt']
  )
  _privateKeyInstance = key
  const auth = useAuthStore()
  auth.privateKey = key
  return key
}

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AES-GCM –∫–ª—é—á–∞ (256 –±–∏—Ç) */
export async function generateAesKey(): Promise<CryptoKey> {
  return crypto.subtle.generateKey(
      { name: 'AES-GCM', length: 256 },
      true,
      ['encrypt', 'decrypt']
  )
}

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IV –¥–ª—è AES-GCM (96 –±–∏—Ç) */
export function generateIv(): Uint8Array {
  return crypto.getRandomValues(new Uint8Array(12))
}

/** AES-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ */
export async function encryptMessageWithAes(
    plaintext: string,
    aesKey: CryptoKey,
    iv: Uint8Array
): Promise<ArrayBuffer> {
  const encoded = new TextEncoder().encode(plaintext)
  return crypto.subtle.encrypt({ name: 'AES-GCM', iv }, aesKey, encoded)
}

/** AES-GCM –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ */
export async function decryptMessageWithAes(
    ciphertext: ArrayBuffer,
    aesKey: CryptoKey,
    iv: Uint8Array
): Promise<ArrayBuffer> {
  return crypto.subtle.decrypt({ name: 'AES-GCM', iv }, aesKey, ciphertext)
}

/** RSA-OAEP —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-–∫–ª—é—á–∞ */
export async function encryptAesKeyWithRsa(
    aesKey: CryptoKey,
    publicKey: CryptoKey
): Promise<ArrayBuffer> {
  const raw = await crypto.subtle.exportKey('raw', aesKey)
  return crypto.subtle.encrypt({ name: 'RSA-OAEP' }, publicKey, raw)
}

/** RSA-OAEP –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-–∫–ª—é—á–∞ */
export async function decryptAesKeyWithRsa(
    encryptedKey: ArrayBuffer,
    privateKey: CryptoKey
): Promise<ArrayBuffer> {
  return crypto.subtle.decrypt({ name: 'RSA-OAEP' }, privateKey, encryptedKey)
}

/** –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –∏–∑ API) */
async function getPublicKeyBase64(userId: string | null): Promise<string> {
  if (!userId) {
    throw new Error('userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
  }
  const auth = useAuthStore()
  if (userId === auth.userId) {
    const cacheKey = `publicKey_${auth.userId}`
    let stored = localStorage.getItem(cacheKey)
    if (!stored) {
      await generateAndUploadKeyPair()
      stored = auth.publicKey!
      localStorage.setItem(cacheKey, stored)
    }
    return stored
  }

  const cacheKey = `publicKey_${userId}`
  const cached = localStorage.getItem(cacheKey)
  if (cached) {
    return cached
  }
  const keyBase64 = await getPublicKey(userId)
  localStorage.setItem(cacheKey, keyBase64)
  return keyBase64
}

/** –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è */
export async function encryptForRecipient(
    recipientId: string,
    plaintext: string
): Promise<{ encryptedContent: string; encryptedAesKey: string; iv: string }> {
  // 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AES-–∫–ª—é—á –∏ IV
  const aesKey = await generateAesKey()
  const iv     = generateIv()

  // 2) –®–∏—Ñ—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è AES-GCM
  const cipher = await encryptMessageWithAes(plaintext, aesKey, iv)

  // 3) –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–∞—Ç–µ–ª—è
  const keyB64 = await getPublicKeyBase64(recipientId)
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º public key –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', keyB64)

  // 4) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RSA-–∫–ª—é—á –∏ —à–∏—Ñ—Ä—É–µ–º AES-–∫–ª—é—á
  const rsaPub   = await importRsaPublicKey(keyB64)
  const encAesKey = await encryptAesKeyWithRsa(aesKey, rsaPub)

  // 5) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –≤ Base64
  return {
    encryptedContent: bufferToBase64(cipher),
    encryptedAesKey:  bufferToBase64(encAesKey),
    iv:               bufferToBase64(iv),
  }
}

/** –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
// export async function decryptMessageContent(msg: MessageDto): Promise<string> {
//   const auth = useAuthStore()
//   console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º private key:', auth.privateKey ?? '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, loadPrivateKey()')
//   try {
//     if (!msg.encryptedAesKey || !msg.encryptedContent || !msg.iv) {
//       throw new Error('–ü–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
//     }

//     const auth = useAuthStore()
//     const privKey = auth.privateKey ?? await loadPrivateKey()

//     // console.log('üîë Encrypted AES key (B64):', msg.encryptedAesKey)
//     // console.log('üìú Ciphertext (B64):', msg.encryptedContent)
//     // console.log('üî¨ IV (B64):', msg.iv)

//     const aesRaw = await decryptAesKeyWithRsa(
//         base64ToBuffer(msg.encryptedAesKey),
//         privKey
//     )
//     // console.log('üîë AES raw key bytes:', new Uint8Array(aesRaw))

//     const aesKey = await crypto.subtle.importKey(
//         'raw',
//         aesRaw,
//         { name: 'AES-GCM' },
//         false,
//         ['decrypt']
//     )

//     const ivBuf = new Uint8Array(base64ToBuffer(msg.iv))
//     const cipherBuf = base64ToBuffer(msg.encryptedContent)
//     // console.log('üî¨ IV bytes:', ivBuf)
//     // console.log('üìú Cipher bytes:', new Uint8Array(cipherBuf))

//     const plainBuf = await decryptMessageWithAes(cipherBuf, aesKey, ivBuf)
//     return new TextDecoder().decode(plainBuf)

//   } catch (err: any) {
//     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err)
//     return '[–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]'
//   }
// }


export async function decryptMessageContent(msg: MessageDto): Promise<string> {
  console.log('üîç [decrypt] –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', msg);

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    if (!msg.encryptedAesKey || !msg.encryptedContent || !msg.iv) {
      console.error('‚ùå [decrypt] –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è:', {
        encryptedAesKey: !!msg.encryptedAesKey,
        encryptedContent: !!msg.encryptedContent,
        iv: !!msg.iv,
      });
      throw new Error('–ü–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }

    // 1) –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    console.log('üîë [decrypt] –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á‚Ä¶');
    const privKey = await loadPrivateKey();
    console.log('‚úÖ [decrypt] –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:', privKey);

    // 2) —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ AES-–∫–ª—é—á–∞
    const aesKeyBuf = base64ToBuffer(msg.encryptedAesKey);
    console.log('üì¶ [decrypt] AES-–∫–ª—é—á (—à–∏—Ñ—Ä, bytes):', new Uint8Array(aesKeyBuf));
    let aesRaw: ArrayBuffer;
    try {
      console.log('üîì [decrypt] decryptAesKeyWithRsa start');
      aesRaw = await decryptAesKeyWithRsa(aesKeyBuf, privKey);
      console.log('‚úÖ [decrypt] AES-–∫–ª—é—á (raw, bytes):', new Uint8Array(aesRaw));
    } catch (err) {
      console.error('‚ùå [decrypt] decryptAesKeyWithRsa failed:', err);
      throw err;
    }

    // 3) –∏–º–ø–æ—Ä—Ç AES-–∫–ª—é—á–∞
    let aesCryptoKey: CryptoKey;
    try {
      console.log('üî® [decrypt] importKey(AES-GCM) start');
      aesCryptoKey = await crypto.subtle.importKey(
        'raw',
        aesRaw,
        { name: 'AES-GCM' },
        false,
        ['decrypt']
      );
      console.log('‚úÖ [decrypt] AES-–∫–ª—é—á –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', aesCryptoKey);
    } catch (err) {
      console.error('‚ùå [decrypt] importKey failed:', err);
      throw err;
    }

    // 4) –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ IV –∏ —à–∏—Ñ—Ä—Ç–µ–∫—Å—Ç–∞
    const ivBuf     = new Uint8Array(base64ToBuffer(msg.iv));
    const cipherBuf = base64ToBuffer(msg.encryptedContent);
    console.log('üß∞ [decrypt] IV (bytes,len):', ivBuf, ivBuf.length);
    console.log('üîê [decrypt] Ciphertext (bytes,len):', new Uint8Array(cipherBuf), cipherBuf.byteLength);

    // 5) AES-–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    try {
      console.log('üöÄ [decrypt] decryptMessageWithAes start');
      const plainBuf = await decryptMessageWithAes(cipherBuf, aesCryptoKey, ivBuf);
      const text = new TextDecoder().decode(plainBuf);
      console.log('üéâ [decrypt] –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', text);
      return text;
    } catch (err) {
      console.error('‚ùå [decrypt] decryptMessageWithAes failed:', err);
      throw err;
    }

  } catch (err: any) {
    console.error('‚ùóÔ∏è [decrypt] —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    return '[–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏]';
  }
}




/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã RSA-OAEP –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä */
export async function generateAndUploadKeyPair(): Promise<void> {
  const keyPair = await generateKeyPair()
  const publicKeyBase64 = await exportRsaPublicKey(keyPair.publicKey)
  await uploadPublicKey(publicKeyBase64)
  await storePrivateKey(keyPair.privateKey)

  const auth = useAuthStore()
  auth.publicKey = publicKeyBase64
  localStorage.setItem(`publicKey_${auth.userId}`, publicKeyBase64)
}
